-- Run these queries in the CLI to create database and table

-- Create queries for todo app client side functions
CREATE DATABASE pernstack;

-- \c into pernstack,

-- Install 'uuid-ossp' in PostgreSQL for implementing uuid_generate_v4() function 
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Creating the schema of users table
CREATE TABLE users(
  user_id UUID  DEFAULT uuid_generate_v4(), 
  user_email VARCHAR(255) NOT NULL UNIQUE, 
  user_password VARCHAR(255) NOT NULL, 
  PRIMARY KEY (user_id)
); 
-- NOT NULL means it's required, and can't be empty. 

-- Creating the schema of todos table
-- FOREIGN KEY connects the table and builds the relationship 
CREATE TABLE todos(
  todo_id SERIAL, 
  user_id UUID, 
  description VARCHAR(255) NOT NULL, 
  create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
  isFinished BOOLEAN DEFAULT FALSE,
  PRIMARY KEY (todo_id), 
  FOREIGN KEY (user_id) REFERENCES users(user_id)
); 


-- Create a test user in users table, it must be single quotation
-- user_id will be generated by default
INSERT INTO users (user_email, user_password) VALUES ('charlie@gmail.com', 'qaz123'); 

-- Check users table 
SELECT * FROM users;

-- Delete a table 
DROP TABLE table_name;

-- Get all the todos 
const user = await pool.query(
      "SELECT u.user_name, t.todo_id, t.description FROM users AS u LEFT JOIN todos AS t ON u.user_id = t.user_id WHERE u.user_id = $1",
      [req.user.id]
    );

-- Manually input some value in todos table 
INSERT INTO todos (user_id, description) VALUES ('a0170bd0-5460-45e4-87ff-6bfde1a72198', 'first todo: bino'); 

-- Inner Join: most strict way, only shows the items that have relation with each other 
select * from users INNER JOIN todos ON users.user_id = todos.user_id;